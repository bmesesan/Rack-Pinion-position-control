
Hardware_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000011be  00001252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011a  0080011a  0000126c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001599  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a25  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb3  00000000  00000000  00003412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000544  00000000  00000000  00003fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000665  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d4  00000000  00000000  00004b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005d45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 93 03 	jmp	0x726	; 0x726 <__vector_1>
       8:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_2>
       c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee eb       	ldi	r30, 0xBE	; 190
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 32       	cpi	r26, 0x2E	; 46
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
      9e:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_EN>:

 //Sends the Enable signal to the LCD
 void LCD_EN(void)
 {
	 //_delay_us()
	 PORTD &= ~(1 << PORTD4);
      a6:	5c 98       	cbi	0x0b, 4	; 11
	 PORTD |= (1 << PORTD4);
      a8:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	85 ed       	ldi	r24, 0xD5	; 213
      ac:	8a 95       	dec	r24
      ae:	f1 f7       	brne	.-4      	; 0xac <LCD_EN+0x6>
      b0:	00 00       	nop
	 _delay_us(40);
	 PORTD &= ~(1 << PORTD4);
      b2:	5c 98       	cbi	0x0b, 4	; 11
      b4:	08 95       	ret

000000b6 <LCD_SendInstr>:

//Sends a 4-bit instruction to the LCD
 void LCD_SendInstr(unsigned char val)
 {
	 //Set RS and R/W on 0
	 PORTC &= ~(1 << PORTC0 | 1 << PORTC1);
      b6:	98 b1       	in	r25, 0x08	; 8
      b8:	9c 7f       	andi	r25, 0xFC	; 252
      ba:	98 b9       	out	0x08, r25	; 8
	 PORTC &= ~(0x0F << 2);
      bc:	98 b1       	in	r25, 0x08	; 8
      be:	93 7c       	andi	r25, 0xC3	; 195
      c0:	98 b9       	out	0x08, r25	; 8
	 PORTC |= (val << 2);
      c2:	28 b1       	in	r18, 0x08	; 8
      c4:	34 e0       	ldi	r19, 0x04	; 4
      c6:	83 9f       	mul	r24, r19
      c8:	c0 01       	movw	r24, r0
      ca:	11 24       	eor	r1, r1
      cc:	82 2b       	or	r24, r18
      ce:	88 b9       	out	0x08, r24	; 8
	 LCD_EN();
      d0:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_EN>
      d4:	08 95       	ret

000000d6 <LCD_WriteData>:
 }

//Sends an 8-bit data value, which will be displayed on the LCD
 void LCD_WriteData(unsigned char val)
 {
      d6:	cf 93       	push	r28
      d8:	c8 2f       	mov	r28, r24
	 unsigned char aux;

	 PORTC &= ~(1 << PORTC0 | 1 << PORTC1);
      da:	88 b1       	in	r24, 0x08	; 8
      dc:	8c 7f       	andi	r24, 0xFC	; 252
      de:	88 b9       	out	0x08, r24	; 8
	 PORTC &= ~(0x0F << 2);
      e0:	88 b1       	in	r24, 0x08	; 8
      e2:	83 7c       	andi	r24, 0xC3	; 195
      e4:	88 b9       	out	0x08, r24	; 8

	 //Set RS to 1 and R/W on 0
	 PORTC |= (1 << PORTC0);
      e6:	40 9a       	sbi	0x08, 0	; 8

	 //send the H part = the most significant 4 bits
	 aux = (val >> 4);
	 PORTC &= ~(0x0F << 2);
      e8:	88 b1       	in	r24, 0x08	; 8
      ea:	83 7c       	andi	r24, 0xC3	; 195
      ec:	88 b9       	out	0x08, r24	; 8
	 PORTC |= (aux << 2);
      ee:	98 b1       	in	r25, 0x08	; 8
      f0:	8c 2f       	mov	r24, r28
      f2:	82 95       	swap	r24
      f4:	8f 70       	andi	r24, 0x0F	; 15
      f6:	88 0f       	add	r24, r24
      f8:	88 0f       	add	r24, r24
      fa:	89 2b       	or	r24, r25
      fc:	88 b9       	out	0x08, r24	; 8
	 LCD_EN();
      fe:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_EN>

	 //send the L part = the least significant 4 bits
	 aux = (val << 4);
	 aux = (aux >> 4);
	 PORTC &= ~(0x0F << 2);
     102:	88 b1       	in	r24, 0x08	; 8
     104:	83 7c       	andi	r24, 0xC3	; 195
     106:	88 b9       	out	0x08, r24	; 8
	 PORTC |= (aux << 2);
     108:	88 b1       	in	r24, 0x08	; 8
     10a:	cf 70       	andi	r28, 0x0F	; 15
     10c:	cc 0f       	add	r28, r28
     10e:	cc 0f       	add	r28, r28
     110:	c8 2b       	or	r28, r24
     112:	c8 b9       	out	0x08, r28	; 8
	 LCD_EN();
     114:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_EN>
 }
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <LCD_Setup>:

//Sends all the necessary setup instructions to the LCD
 void LCD_Setup(void)
 {
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	28 97       	sbiw	r28, 0x08	; 8
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	de bf       	out	0x3e, r29	; 62
     134:	0f be       	out	0x3f, r0	; 63
     136:	cd bf       	out	0x3d, r28	; 61
	 unsigned char instr[8] = {3, 3, 3, 2, 2, 1, 0, 12};
     138:	88 e0       	ldi	r24, 0x08	; 8
     13a:	e2 e0       	ldi	r30, 0x02	; 2
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	de 01       	movw	r26, r28
     140:	11 96       	adiw	r26, 0x01	; 1
     142:	01 90       	ld	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	8a 95       	dec	r24
     148:	e1 f7       	brne	.-8      	; 0x142 <LCD_Setup+0x26>
     14a:	8e 01       	movw	r16, r28
     14c:	0f 5f       	subi	r16, 0xFF	; 255
     14e:	1f 4f       	sbci	r17, 0xFF	; 255
     150:	7e 01       	movw	r14, r28
     152:	89 e0       	ldi	r24, 0x09	; 9
     154:	e8 0e       	add	r14, r24
     156:	f1 1c       	adc	r15, r1
	 unsigned char i;

	 for (i = 0; i < 8; i++)
	 {
		 LCD_SendInstr(instr[i]);
     158:	f8 01       	movw	r30, r16
     15a:	81 91       	ld	r24, Z+
     15c:	8f 01       	movw	r16, r30
     15e:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_SendInstr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     162:	8f e9       	ldi	r24, 0x9F	; 159
     164:	9f e0       	ldi	r25, 0x0F	; 15
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Setup+0x4a>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Setup+0x50>
     16c:	00 00       	nop
 void LCD_Setup(void)
 {
	 unsigned char instr[8] = {3, 3, 3, 2, 2, 1, 0, 12};
	 unsigned char i;

	 for (i = 0; i < 8; i++)
     16e:	0e 15       	cp	r16, r14
     170:	1f 05       	cpc	r17, r15
     172:	91 f7       	brne	.-28     	; 0x158 <LCD_Setup+0x3c>
	 {
		 LCD_SendInstr(instr[i]);
		 _delay_ms(1);
	 }
 }
     174:	28 96       	adiw	r28, 0x08	; 8
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	08 95       	ret

0000018e <mirr_number>:
	 }
 }

 //returns the mirrored number of the input
 unsigned int mirr_number(unsigned int num)
 {
     18e:	fc 01       	movw	r30, r24
	 unsigned int val = 0;
	 while (num > 0)
     190:	89 2b       	or	r24, r25
     192:	a9 f1       	breq	.+106    	; 0x1fe <mirr_number+0x70>
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	50 e0       	ldi	r21, 0x00	; 0
	 {
		 val = val * 10 + num % 10;
     198:	ca 01       	movw	r24, r20
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	44 0f       	add	r20, r20
     1a0:	55 1f       	adc	r21, r21
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	44 0f       	add	r20, r20
     1a8:	55 1f       	adc	r21, r21
     1aa:	48 0f       	add	r20, r24
     1ac:	59 1f       	adc	r21, r25
     1ae:	9f 01       	movw	r18, r30
     1b0:	ad ec       	ldi	r26, 0xCD	; 205
     1b2:	bc ec       	ldi	r27, 0xCC	; 204
     1b4:	0e 94 ce 08 	call	0x119c	; 0x119c <__umulhisi3>
     1b8:	96 95       	lsr	r25
     1ba:	87 95       	ror	r24
     1bc:	96 95       	lsr	r25
     1be:	87 95       	ror	r24
     1c0:	96 95       	lsr	r25
     1c2:	87 95       	ror	r24
     1c4:	9c 01       	movw	r18, r24
     1c6:	22 0f       	add	r18, r18
     1c8:	33 1f       	adc	r19, r19
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	82 0f       	add	r24, r18
     1d8:	93 1f       	adc	r25, r19
     1da:	9f 01       	movw	r18, r30
     1dc:	28 1b       	sub	r18, r24
     1de:	39 0b       	sbc	r19, r25
     1e0:	42 0f       	add	r20, r18
     1e2:	53 1f       	adc	r21, r19
		 num = num / 10;
     1e4:	9f 01       	movw	r18, r30
     1e6:	0e 94 ce 08 	call	0x119c	; 0x119c <__umulhisi3>
     1ea:	fc 01       	movw	r30, r24
     1ec:	f6 95       	lsr	r31
     1ee:	e7 95       	ror	r30
     1f0:	f6 95       	lsr	r31
     1f2:	e7 95       	ror	r30
     1f4:	f6 95       	lsr	r31
     1f6:	e7 95       	ror	r30

 //returns the mirrored number of the input
 unsigned int mirr_number(unsigned int num)
 {
	 unsigned int val = 0;
	 while (num > 0)
     1f8:	30 97       	sbiw	r30, 0x00	; 0
     1fa:	71 f6       	brne	.-100    	; 0x198 <mirr_number+0xa>
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <mirr_number+0x74>
 }

 //returns the mirrored number of the input
 unsigned int mirr_number(unsigned int num)
 {
	 unsigned int val = 0;
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
	 {
		 val = val * 10 + num % 10;
		 num = num / 10;
	 }
	 return (val);
 }
     202:	ca 01       	movw	r24, r20
     204:	08 95       	ret

00000206 <nr_cif>:

 //returns the number of digits in a given number
 unsigned int nr_cif(unsigned int num)
 {
     206:	9c 01       	movw	r18, r24
	 unsigned int sum = 0;

	 if (num == 0)
     208:	89 2b       	or	r24, r25
     20a:	a9 f0       	breq	.+42     	; 0x236 <nr_cif+0x30>
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	50 e0       	ldi	r21, 0x00	; 0
		return (1);

	 while (num > 0)
	 {
		 sum++;
     210:	4f 5f       	subi	r20, 0xFF	; 255
     212:	5f 4f       	sbci	r21, 0xFF	; 255
		 num = num / 10;
     214:	ad ec       	ldi	r26, 0xCD	; 205
     216:	bc ec       	ldi	r27, 0xCC	; 204
     218:	0e 94 ce 08 	call	0x119c	; 0x119c <__umulhisi3>
     21c:	9c 01       	movw	r18, r24
     21e:	36 95       	lsr	r19
     220:	27 95       	ror	r18
     222:	36 95       	lsr	r19
     224:	27 95       	ror	r18
     226:	36 95       	lsr	r19
     228:	27 95       	ror	r18
	 unsigned int sum = 0;

	 if (num == 0)
		return (1);

	 while (num > 0)
     22a:	21 15       	cp	r18, r1
     22c:	31 05       	cpc	r19, r1
     22e:	81 f7       	brne	.-32     	; 0x210 <nr_cif+0xa>
	 {
		 sum++;
     230:	84 2f       	mov	r24, r20
     232:	95 2f       	mov	r25, r21
     234:	08 95       	ret
 unsigned int nr_cif(unsigned int num)
 {
	 unsigned int sum = 0;

	 if (num == 0)
		return (1);
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
		 sum++;
		 num = num / 10;
	 }

	 return (sum);
 }
     23a:	08 95       	ret

0000023c <LCD_WriteInt>:
	 }
 }

//Writes a signed integer number on the LCD
 void LCD_WriteInt(int num)
 {
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	7c 01       	movw	r14, r24
	 unsigned int val;
	 unsigned int cif;

	 if (num < 0)
     24a:	99 23       	and	r25, r25
     24c:	34 f4       	brge	.+12     	; 0x25a <LCD_WriteInt+0x1e>
	 {
		 LCD_WriteData('-');
     24e:	8d e2       	ldi	r24, 0x2D	; 45
     250:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		 num = num * (-1);
     254:	f1 94       	neg	r15
     256:	e1 94       	neg	r14
     258:	f1 08       	sbc	r15, r1
	 }

	 //we send the digits in reverse order
	 val = mirr_number(num);
     25a:	c7 01       	movw	r24, r14
     25c:	0e 94 c7 00 	call	0x18e	; 0x18e <mirr_number>
     260:	ec 01       	movw	r28, r24
	 //in case the number ends with a 0 we need to know the number of digits it has
	 cif = nr_cif(num);
     262:	c7 01       	movw	r24, r14
     264:	0e 94 03 01 	call	0x206	; 0x206 <nr_cif>
     268:	8c 01       	movw	r16, r24

	 while (val > 0)
     26a:	20 97       	sbiw	r28, 0x00	; 0
     26c:	69 f1       	breq	.+90     	; 0x2c8 <LCD_WriteInt+0x8c>
	 {
		 //write digit by digit
		 LCD_WriteData(val % 10 + 48);
     26e:	9e 01       	movw	r18, r28
     270:	ad ec       	ldi	r26, 0xCD	; 205
     272:	bc ec       	ldi	r27, 0xCC	; 204
     274:	0e 94 ce 08 	call	0x119c	; 0x119c <__umulhisi3>
     278:	96 95       	lsr	r25
     27a:	87 95       	ror	r24
     27c:	96 95       	lsr	r25
     27e:	87 95       	ror	r24
     280:	96 95       	lsr	r25
     282:	87 95       	ror	r24
     284:	9c 01       	movw	r18, r24
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	82 0f       	add	r24, r18
     298:	93 1f       	adc	r25, r19
     29a:	9e 01       	movw	r18, r28
     29c:	28 1b       	sub	r18, r24
     29e:	39 0b       	sbc	r19, r25
     2a0:	c9 01       	movw	r24, r18
     2a2:	80 5d       	subi	r24, 0xD0	; 208
     2a4:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		 val = val / 10;
     2a8:	9e 01       	movw	r18, r28
     2aa:	ad ec       	ldi	r26, 0xCD	; 205
     2ac:	bc ec       	ldi	r27, 0xCC	; 204
     2ae:	0e 94 ce 08 	call	0x119c	; 0x119c <__umulhisi3>
     2b2:	ec 01       	movw	r28, r24
     2b4:	d6 95       	lsr	r29
     2b6:	c7 95       	ror	r28
     2b8:	d6 95       	lsr	r29
     2ba:	c7 95       	ror	r28
     2bc:	d6 95       	lsr	r29
     2be:	c7 95       	ror	r28
		 cif--;
     2c0:	01 50       	subi	r16, 0x01	; 1
     2c2:	11 09       	sbc	r17, r1
	 //we send the digits in reverse order
	 val = mirr_number(num);
	 //in case the number ends with a 0 we need to know the number of digits it has
	 cif = nr_cif(num);

	 while (val > 0)
     2c4:	20 97       	sbiw	r28, 0x00	; 0
     2c6:	99 f6       	brne	.-90     	; 0x26e <LCD_WriteInt+0x32>
		 //write digit by digit
		 LCD_WriteData(val % 10 + 48);
		 val = val / 10;
		 cif--;
	 }
	 if (cif > 0 || num == 0)
     2c8:	01 15       	cp	r16, r1
     2ca:	11 05       	cpc	r17, r1
     2cc:	49 f4       	brne	.+18     	; 0x2e0 <LCD_WriteInt+0xa4>
     2ce:	ef 28       	or	r14, r15
     2d0:	71 f0       	breq	.+28     	; 0x2ee <LCD_WriteInt+0xb2>
     2d2:	10 c0       	rjmp	.+32     	; 0x2f4 <LCD_WriteInt+0xb8>
		 LCD_WriteData('0');
		 if (cif > 0)
			cif--;
		 while (cif > 0)
		 {
			LCD_WriteData('0');
     2d4:	80 e3       	ldi	r24, 0x30	; 48
     2d6:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
			cif--;
     2da:	21 97       	sbiw	r28, 0x01	; 1
	 {
		 //case in which the original number ends with a '0' digit, we send out one more '0'
		 LCD_WriteData('0');
		 if (cif > 0)
			cif--;
		 while (cif > 0)
     2dc:	d9 f7       	brne	.-10     	; 0x2d4 <LCD_WriteInt+0x98>
     2de:	0a c0       	rjmp	.+20     	; 0x2f4 <LCD_WriteInt+0xb8>
		 cif--;
	 }
	 if (cif > 0 || num == 0)
	 {
		 //case in which the original number ends with a '0' digit, we send out one more '0'
		 LCD_WriteData('0');
     2e0:	80 e3       	ldi	r24, 0x30	; 48
     2e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		 if (cif > 0)
			cif--;
     2e6:	e8 01       	movw	r28, r16
     2e8:	21 97       	sbiw	r28, 0x01	; 1
		 while (cif > 0)
     2ea:	a1 f7       	brne	.-24     	; 0x2d4 <LCD_WriteInt+0x98>
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <LCD_WriteInt+0xb8>
		 cif--;
	 }
	 if (cif > 0 || num == 0)
	 {
		 //case in which the original number ends with a '0' digit, we send out one more '0'
		 LCD_WriteData('0');
     2ee:	80 e3       	ldi	r24, 0x30	; 48
     2f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		 {
			LCD_WriteData('0');
			cif--;
		 }
	 }
 }
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	08 95       	ret

00000302 <LCD_WriteString>:
	 return (sum);
 }

//Writes a string on the LCD
 void LCD_WriteString(char *str)
 {
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	ec 01       	movw	r28, r24
	 unsigned int i = 0;

	 while (str[i] != 0)
     308:	88 81       	ld	r24, Y
     30a:	88 23       	and	r24, r24
     30c:	31 f0       	breq	.+12     	; 0x31a <LCD_WriteString+0x18>
     30e:	21 96       	adiw	r28, 0x01	; 1
	 {
		 LCD_WriteData(str[i]);
     310:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
//Writes a string on the LCD
 void LCD_WriteString(char *str)
 {
	 unsigned int i = 0;

	 while (str[i] != 0)
     314:	89 91       	ld	r24, Y+
     316:	81 11       	cpse	r24, r1
     318:	fb cf       	rjmp	.-10     	; 0x310 <LCD_WriteString+0xe>
	 {
		 LCD_WriteData(str[i]);
		 i++;
	 }
 }
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <LCD_WriteDouble>:

//Writes a rational number, with 4 digit accuracy on the LCD
 void LCD_WriteDouble(double num)
 {
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	4b 01       	movw	r8, r22
     332:	5c 01       	movw	r10, r24
	 int aux;

	 if (num < 0)
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	a9 01       	movw	r20, r18
     33a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__cmpsf2>
     33e:	88 23       	and	r24, r24
     340:	3c f4       	brge	.+14     	; 0x350 <LCD_WriteDouble+0x30>
	 {
		 LCD_WriteData('-');
     342:	8d e2       	ldi	r24, 0x2D	; 45
     344:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		 num = num * (-1);
     348:	b7 fa       	bst	r11, 7
     34a:	b0 94       	com	r11
     34c:	b7 f8       	bld	r11, 7
     34e:	b0 94       	com	r11
	 }
	 //write the integer part of the number
	 aux = (int)(num);
     350:	c5 01       	movw	r24, r10
     352:	b4 01       	movw	r22, r8
     354:	0e 94 74 07 	call	0xee8	; 0xee8 <__fixsfsi>
     358:	6b 01       	movw	r12, r22
     35a:	7c 01       	movw	r14, r24
	 LCD_WriteInt(aux);
     35c:	cb 01       	movw	r24, r22
     35e:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>

	 //find the rational part of the number and display it
	 num = (double)(num - aux);
     362:	b6 01       	movw	r22, r12
     364:	dd 0c       	add	r13, r13
     366:	88 0b       	sbc	r24, r24
     368:	99 0b       	sbc	r25, r25
     36a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatsisf>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	c5 01       	movw	r24, r10
     374:	b4 01       	movw	r22, r8
     376:	0e 94 90 06 	call	0xd20	; 0xd20 <__subsf3>
	 num = num * 10000;
	 aux = (int)(num);
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e4       	ldi	r19, 0x40	; 64
     37e:	4c e1       	ldi	r20, 0x1C	; 28
     380:	56 e4       	ldi	r21, 0x46	; 70
     382:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     386:	0e 94 74 07 	call	0xee8	; 0xee8 <__fixsfsi>
     38a:	6b 01       	movw	r12, r22
     38c:	7c 01       	movw	r14, r24
	 LCD_WriteData('.');
     38e:	8e e2       	ldi	r24, 0x2E	; 46
     390:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
	 if (aux < 1000)
     394:	88 ee       	ldi	r24, 0xE8	; 232
     396:	c8 16       	cp	r12, r24
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	d8 06       	cpc	r13, r24
     39c:	04 f5       	brge	.+64     	; 0x3de <LCD_WriteDouble+0xbe>
	 {
		LCD_WriteInt(0);
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
		if (aux < 100)
     3a6:	84 e6       	ldi	r24, 0x64	; 100
     3a8:	c8 16       	cp	r12, r24
     3aa:	d1 04       	cpc	r13, r1
     3ac:	a4 f4       	brge	.+40     	; 0x3d6 <LCD_WriteDouble+0xb6>
		{
			LCD_WriteInt(0);
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
			if (aux < 10)
     3b6:	8a e0       	ldi	r24, 0x0A	; 10
     3b8:	c8 16       	cp	r12, r24
     3ba:	d1 04       	cpc	r13, r1
     3bc:	44 f4       	brge	.+16     	; 0x3ce <LCD_WriteDouble+0xae>
			{
				LCD_WriteInt(0);
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
				LCD_WriteInt(aux);
     3c6:	c6 01       	movw	r24, r12
     3c8:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
     3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <LCD_WriteDouble+0xc4>
			}
			else
			{
				LCD_WriteInt(aux);
     3ce:	c6 01       	movw	r24, r12
     3d0:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
     3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <LCD_WriteDouble+0xc4>
			}
		}
		else
		{
			LCD_WriteInt(aux);
     3d6:	c6 01       	movw	r24, r12
     3d8:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <LCD_WriteDouble+0xc4>
		}
	}
	else
	{
		LCD_WriteInt(aux);
     3de:	c6 01       	movw	r24, r12
     3e0:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>
	}
 }
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	08 95       	ret

000003f6 <LCD_SetPosition>:

//Sets the position of the next character written to the LCD
 void LCD_SetPosition(unsigned char pos)
 {
     3f6:	cf 93       	push	r28
     3f8:	c8 2f       	mov	r28, r24
	 unsigned char aux;

	 //Send High value
	 aux = 0b00001000 + (pos >> 4);
	 LCD_SendInstr(aux);
     3fa:	82 95       	swap	r24
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	88 5f       	subi	r24, 0xF8	; 248
     400:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_SendInstr>

	 //Send Low value
	 aux = (pos << 4);
	 aux = (aux >> 4);
	 LCD_SendInstr(aux);
     404:	8c 2f       	mov	r24, r28
     406:	8f 70       	andi	r24, 0x0F	; 15
     408:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_SendInstr>
 }
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <LCD_InitialDisplay>:
//V = Velocity or Speed
//Pos = the current position of the pinion on the rack
//Ref = the desired position
 void LCD_InitialDisplay(void)
 {
	LCD_SetPosition(0);
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	LCD_WriteString("V:");
     416:	8a e0       	ldi	r24, 0x0A	; 10
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 81 01 	call	0x302	; 0x302 <LCD_WriteString>

	LCD_SetPosition(12);
     41e:	8c e0       	ldi	r24, 0x0C	; 12
     420:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	LCD_WriteString("Pos:");
     424:	8d e0       	ldi	r24, 0x0D	; 13
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 81 01 	call	0x302	; 0x302 <LCD_WriteString>

	LCD_SetPosition(20);
     42c:	84 e1       	ldi	r24, 0x14	; 20
     42e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	LCD_WriteString("A:");
     432:	82 e1       	ldi	r24, 0x12	; 18
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 81 01 	call	0x302	; 0x302 <LCD_WriteString>

	LCD_SetPosition(32);
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	LCD_WriteString("Ref:");
     440:	85 e1       	ldi	r24, 0x15	; 21
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 81 01 	call	0x302	; 0x302 <LCD_WriteString>
     448:	08 95       	ret

0000044a <LCD_DisplayAcc>:
 }

  void LCD_DisplayAcc(double acc)
  {
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	6b 01       	movw	r12, r22
     458:	7c 01       	movw	r14, r24
	  unsigned int pos = nr_cif((int)(acc)) + 22 + 5;
     45a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fixsfsi>
     45e:	cb 01       	movw	r24, r22
     460:	0e 94 03 01 	call	0x206	; 0x206 <nr_cif>
     464:	ec 01       	movw	r28, r24

	  LCD_SetPosition(22);
     466:	86 e1       	ldi	r24, 0x16	; 22
     468:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	  LCD_WriteDouble(acc);
     46c:	c7 01       	movw	r24, r14
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteDouble>

	  if (acc < 0)
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	a9 01       	movw	r20, r18
     47a:	c7 01       	movw	r24, r14
     47c:	b6 01       	movw	r22, r12
     47e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__cmpsf2>
     482:	88 23       	and	r24, r24
     484:	14 f0       	brlt	.+4      	; 0x48a <LCD_DisplayAcc+0x40>
	LCD_WriteString("Ref:");
 }

  void LCD_DisplayAcc(double acc)
  {
	  unsigned int pos = nr_cif((int)(acc)) + 22 + 5;
     486:	6b 96       	adiw	r28, 0x1b	; 27
     488:	01 c0       	rjmp	.+2      	; 0x48c <LCD_DisplayAcc+0x42>

	  LCD_SetPosition(22);
	  LCD_WriteDouble(acc);

	  if (acc < 0)
		pos++;
     48a:	6c 96       	adiw	r28, 0x1c	; 28
	  LCD_SetPosition(pos);
     48c:	8c 2f       	mov	r24, r28
     48e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	  while (pos < 32)
     492:	c0 32       	cpi	r28, 0x20	; 32
     494:	d1 05       	cpc	r29, r1
     496:	38 f4       	brcc	.+14     	; 0x4a6 <LCD_DisplayAcc+0x5c>
	  {
		  LCD_WriteData(' ');
     498:	80 e2       	ldi	r24, 0x20	; 32
     49a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		  pos++;
     49e:	21 96       	adiw	r28, 0x01	; 1
	  LCD_WriteDouble(acc);

	  if (acc < 0)
		pos++;
	  LCD_SetPosition(pos);
	  while (pos < 32)
     4a0:	c0 32       	cpi	r28, 0x20	; 32
     4a2:	d1 05       	cpc	r29, r1
     4a4:	c9 f7       	brne	.-14     	; 0x498 <LCD_DisplayAcc+0x4e>
	  {
		  LCD_WriteData(' ');
		  pos++;
	  }
  }
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	08 95       	ret

000004b4 <LCD_DisplayVel>:

  void LCD_DisplayVel(double vel)
  {
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	6b 01       	movw	r12, r22
     4c2:	7c 01       	movw	r14, r24
	  unsigned int pos = nr_cif((int)(vel)) + 2 + 5;
     4c4:	0e 94 74 07 	call	0xee8	; 0xee8 <__fixsfsi>
     4c8:	cb 01       	movw	r24, r22
     4ca:	0e 94 03 01 	call	0x206	; 0x206 <nr_cif>
     4ce:	ec 01       	movw	r28, r24
     4d0:	27 96       	adiw	r28, 0x07	; 7

	  LCD_SetPosition(2);
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	  LCD_WriteDouble(vel);
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteDouble>

	  LCD_SetPosition(pos);
     4e0:	8c 2f       	mov	r24, r28
     4e2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	  while (pos < 12)
     4e6:	cc 30       	cpi	r28, 0x0C	; 12
     4e8:	d1 05       	cpc	r29, r1
     4ea:	38 f4       	brcc	.+14     	; 0x4fa <LCD_DisplayVel+0x46>
	  {
		  LCD_WriteData(' ');
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		  pos++;
     4f2:	21 96       	adiw	r28, 0x01	; 1

	  LCD_SetPosition(2);
	  LCD_WriteDouble(vel);

	  LCD_SetPosition(pos);
	  while (pos < 12)
     4f4:	cc 30       	cpi	r28, 0x0C	; 12
     4f6:	d1 05       	cpc	r29, r1
     4f8:	c9 f7       	brne	.-14     	; 0x4ec <LCD_DisplayVel+0x38>
	  {
		  LCD_WriteData(' ');
		  pos++;
	  }
  }
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	08 95       	ret

00000508 <LCD_DisplayPos>:

 void LCD_DisplayPos(int pos)
 {
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	8c 01       	movw	r16, r24
	unsigned int pos1 = nr_cif((int)(pos)) + 16;
     512:	0e 94 03 01 	call	0x206	; 0x206 <nr_cif>
     516:	ec 01       	movw	r28, r24
     518:	60 96       	adiw	r28, 0x10	; 16

	LCD_SetPosition(16);
     51a:	80 e1       	ldi	r24, 0x10	; 16
     51c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	LCD_WriteInt(pos);
     520:	c8 01       	movw	r24, r16
     522:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>

	LCD_SetPosition(pos1);
     526:	8c 2f       	mov	r24, r28
     528:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	while (pos1 < 20)
     52c:	c4 31       	cpi	r28, 0x14	; 20
     52e:	d1 05       	cpc	r29, r1
     530:	38 f4       	brcc	.+14     	; 0x540 <LCD_DisplayPos+0x38>
	{
		LCD_WriteData(' ');
     532:	80 e2       	ldi	r24, 0x20	; 32
     534:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		pos1++;
     538:	21 96       	adiw	r28, 0x01	; 1

	LCD_SetPosition(16);
	LCD_WriteInt(pos);

	LCD_SetPosition(pos1);
	while (pos1 < 20)
     53a:	c4 31       	cpi	r28, 0x14	; 20
     53c:	d1 05       	cpc	r29, r1
     53e:	c9 f7       	brne	.-14     	; 0x532 <LCD_DisplayPos+0x2a>
	{
		LCD_WriteData(' ');
		pos1++;
	}
 }
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <LCD_DisplayRef>:

 void LCD_DisplayRef(int ref)
 {
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	8c 01       	movw	r16, r24
	unsigned int pos = nr_cif((int)(ref)) + 36;
     554:	0e 94 03 01 	call	0x206	; 0x206 <nr_cif>
     558:	ec 01       	movw	r28, r24
     55a:	a4 96       	adiw	r28, 0x24	; 36
	
	LCD_SetPosition(36);
     55c:	84 e2       	ldi	r24, 0x24	; 36
     55e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	LCD_WriteInt(ref);
     562:	c8 01       	movw	r24, r16
     564:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_WriteInt>

	LCD_SetPosition(pos);
     568:	8c 2f       	mov	r24, r28
     56a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_SetPosition>
	while (pos < 40)
     56e:	c8 32       	cpi	r28, 0x28	; 40
     570:	d1 05       	cpc	r29, r1
     572:	38 f4       	brcc	.+14     	; 0x582 <LCD_DisplayRef+0x38>
	{
		LCD_WriteData(' ');
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteData>
		pos++;
     57a:	21 96       	adiw	r28, 0x01	; 1
	
	LCD_SetPosition(36);
	LCD_WriteInt(ref);

	LCD_SetPosition(pos);
	while (pos < 40)
     57c:	c8 32       	cpi	r28, 0x28	; 40
     57e:	d1 05       	cpc	r29, r1
     580:	c9 f7       	brne	.-14     	; 0x574 <LCD_DisplayRef+0x2a>
	{
		LCD_WriteData(' ');
		pos++;
	}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret

0000058c <main>:
volatile unsigned int count10us = 1;
volatile int refPosition = 0;
volatile int refPosition_select = 0;

int main(void)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	00 d0       	rcall	.+0      	; 0x592 <main+0x6>
     592:	00 d0       	rcall	.+0      	; 0x594 <main+0x8>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
	setupPorts();
     598:	0e 94 0d 05 	call	0xa1a	; 0xa1a <setupPorts>
	LCD_Setup();
     59c:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Setup>
	LCD_InitialDisplay();
     5a0:	0e 94 08 02 	call	0x410	; 0x410 <LCD_InitialDisplay>
	MotorSetup();
     5a4:	0e 94 74 05 	call	0xae8	; 0xae8 <MotorSetup>

	int error = 0;
	int prev_error = 0;
	double errorI = 0;
     5a8:	19 82       	std	Y+1, r1	; 0x01
     5aa:	1a 82       	std	Y+2, r1	; 0x02
     5ac:	1b 82       	std	Y+3, r1	; 0x03
     5ae:	1c 82       	std	Y+4, r1	; 0x04
	setupPorts();
	LCD_Setup();
	LCD_InitialDisplay();
	MotorSetup();

	int error = 0;
     5b0:	e1 2c       	mov	r14, r1
     5b2:	f1 2c       	mov	r15, r1
	int drvPID = 0;

    while (1) 
    {	
		prev_error = error;
		error = getError(refPosition, motorPosition);
     5b4:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <motorPosition>
     5b8:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <motorPosition+0x1>
     5bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <refPosition>
     5c0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <refPosition+0x1>
     5c4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <getError>
     5c8:	08 2f       	mov	r16, r24
     5ca:	19 2f       	mov	r17, r25
		MotorSetDirection(getDirection(refPosition, pinionPosition));
     5cc:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <pinionPosition>
     5d0:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <pinionPosition+0x1>
     5d4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <refPosition>
     5d8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <refPosition+0x1>
     5dc:	0e 94 85 05 	call	0xb0a	; 0xb0a <getDirection>
     5e0:	0e 94 66 05 	call	0xacc	; 0xacc <MotorSetDirection>
		drvPID = getPIDdrive(error, prev_error, &errorI);
     5e4:	ae 01       	movw	r20, r28
     5e6:	4f 5f       	subi	r20, 0xFF	; 255
     5e8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ea:	6e 2d       	mov	r22, r14
     5ec:	7f 2d       	mov	r23, r15
     5ee:	80 2f       	mov	r24, r16
     5f0:	91 2f       	mov	r25, r17
     5f2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <getPIDdrive>
		MotorSetDuty(drvPID);
     5f6:	0e 94 63 05 	call	0xac6	; 0xac6 <MotorSetDuty>
		LCD_DisplayVel(velocity);
     5fa:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <velocity>
     5fe:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <velocity+0x1>
     602:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <velocity+0x2>
     606:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <velocity+0x3>
     60a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_DisplayVel>
		LCD_DisplayAcc(acceleration);
     60e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <acceleration>
     612:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <acceleration+0x1>
     616:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <acceleration+0x2>
     61a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <acceleration+0x3>
     61e:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_DisplayAcc>
		LCD_DisplayPos(pinionPosition);
     622:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <pinionPosition>
     626:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <pinionPosition+0x1>
     62a:	0e 94 84 02 	call	0x508	; 0x508 <LCD_DisplayPos>
		LCD_DisplayRef(refPosition_select);
     62e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     632:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     636:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_DisplayRef>
	int drvPID = 0;

    while (1) 
    {	
		prev_error = error;
		error = getError(refPosition, motorPosition);
     63a:	e0 2e       	mov	r14, r16
     63c:	f1 2e       	mov	r15, r17
     63e:	ba cf       	rjmp	.-140    	; 0x5b4 <main+0x28>

00000640 <__vector_3>:
    }
}

//Pin change interrupt 0, on PORTB0, PORTB1, PORTB2
ISR (PCINT0_vect)
{
     640:	1f 92       	push	r1
     642:	0f 92       	push	r0
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	0f 92       	push	r0
     648:	11 24       	eor	r1, r1
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	4f 93       	push	r20
     650:	5f 93       	push	r21
     652:	6f 93       	push	r22
     654:	7f 93       	push	r23
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	//REF+ is pressed
	if (!(PINB & (1 << PINB0)))
     662:	18 99       	sbic	0x03, 0	; 3
     664:	16 c0       	rjmp	.+44     	; 0x692 <__vector_3+0x52>
	{
		//Limit the reference to the maximum position of the pinion
		if (refPosition_select == RACK_TEETH)
     666:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     66a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     66e:	ce 97       	sbiw	r24, 0x3e	; 62
     670:	39 f4       	brne	.+14     	; 0x680 <__vector_3+0x40>
		{
			refPosition_select = RACK_TEETH;
     672:	8e e3       	ldi	r24, 0x3E	; 62
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
     67a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__vector_3+0x52>
		}
		else
		{
			refPosition_select++;
     680:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     684:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
     68e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		}
	}
	//REF- is pressed
	if (!(PINB & (1 << PINB1)))
     692:	19 99       	sbic	0x03, 1	; 3
     694:	14 c0       	rjmp	.+40     	; 0x6be <__vector_3+0x7e>
	{
		//Limit to the minimum position
		if (refPosition_select == 0)
     696:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     69a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     69e:	89 2b       	or	r24, r25
     6a0:	29 f4       	brne	.+10     	; 0x6ac <__vector_3+0x6c>
		{
			refPosition_select = 0;
     6a2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
     6a6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
     6aa:	09 c0       	rjmp	.+18     	; 0x6be <__vector_3+0x7e>
		}
		else
		{
			refPosition_select--;
     6ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     6b0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
     6ba:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		}
	}
	//The desired position is confirmed
	if (!(PINB & (1 << PINB2)))
     6be:	1a 99       	sbic	0x03, 2	; 3
     6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <__vector_3+0x96>
	{
		refPosition = refPosition_select;
     6c2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     6c6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     6ca:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <refPosition+0x1>
     6ce:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <refPosition>
		startTimer0();
     6d2:	0e 94 27 05 	call	0xa4e	; 0xa4e <startTimer0>
	}
}
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <__vector_11>:

//Timer1 interrupt, generated at every 10 us
ISR (TIMER1_COMPA_vect)
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
	count10us++;
     706:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     70a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     714:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <__vector_1>:

//External interrupt 0
ISR (INT0_vect)
{
     726:	1f 92       	push	r1
     728:	0f 92       	push	r0
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	0f 92       	push	r0
     72e:	11 24       	eor	r1, r1
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	2f 93       	push	r18
     742:	3f 93       	push	r19
     744:	4f 93       	push	r20
     746:	5f 93       	push	r21
     748:	6f 93       	push	r22
     74a:	7f 93       	push	r23
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31
	//if a rising edge is detected when the other signal is low means a Motor position increment
	if (!(PIND & (1 << PIND3)))
     75c:	4b 99       	sbic	0x09, 3	; 9
     75e:	85 c0       	rjmp	.+266    	; 0x86a <__vector_1+0x144>
	{
		stopTimer1();
     760:	0e 94 42 05 	call	0xa84	; 0xa84 <stopTimer1>
		motorPosition++;
     764:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <motorPosition>
     768:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <motorPosition+0x1>
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <motorPosition+0x1>
     772:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <motorPosition>
		//set the Pinion position
		pinionPosition = motorPosition / PINION_CONSTANT;
     776:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <motorPosition>
     77a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <motorPosition+0x1>
     77e:	99 23       	and	r25, r25
     780:	0c f4       	brge	.+2      	; 0x784 <__vector_1+0x5e>
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	95 95       	asr	r25
     786:	87 95       	ror	r24
     788:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <pinionPosition+0x1>
     78c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pinionPosition>
		//calculates the velocity and the previous velocity
		prev_velocity = velocity;
     790:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <velocity>
     794:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <velocity+0x1>
     798:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <velocity+0x2>
     79c:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <velocity+0x3>
     7a0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <prev_velocity>
     7a4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <prev_velocity+0x1>
     7a8:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <prev_velocity+0x2>
     7ac:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <prev_velocity+0x3>
		velocity = (double)(VELOCITY_CONST / count10us);
     7b0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     7b4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatunsisf>
     7c0:	9b 01       	movw	r18, r22
     7c2:	ac 01       	movw	r20, r24
     7c4:	6f ef       	ldi	r22, 0xFF	; 255
     7c6:	7f ef       	ldi	r23, 0xFF	; 255
     7c8:	87 e4       	ldi	r24, 0x47	; 71
     7ca:	91 e4       	ldi	r25, 0x41	; 65
     7cc:	0e 94 02 07 	call	0xe04	; 0xe04 <__divsf3>
     7d0:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <velocity>
     7d4:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <velocity+0x1>
     7d8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <velocity+0x2>
     7dc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <velocity+0x3>
		//calculates the acceleration, based on the current velocity and and previous velocity
		acceleration = (double)(((velocity * 100000 - prev_velocity * 100000) / count10us));
     7e0:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <velocity>
     7e4:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <velocity+0x1>
     7e8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <velocity+0x2>
     7ec:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <velocity+0x3>
     7f0:	80 90 22 01 	lds	r8, 0x0122	; 0x800122 <prev_velocity>
     7f4:	90 90 23 01 	lds	r9, 0x0123	; 0x800123 <prev_velocity+0x1>
     7f8:	a0 90 24 01 	lds	r10, 0x0124	; 0x800124 <prev_velocity+0x2>
     7fc:	b0 90 25 01 	lds	r11, 0x0125	; 0x800125 <prev_velocity+0x3>
     800:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
     804:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e5       	ldi	r19, 0x50	; 80
     80c:	43 ec       	ldi	r20, 0xC3	; 195
     80e:	57 e4       	ldi	r21, 0x47	; 71
     810:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e5       	ldi	r19, 0x50	; 80
     81c:	43 ec       	ldi	r20, 0xC3	; 195
     81e:	57 e4       	ldi	r21, 0x47	; 71
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	c7 01       	movw	r24, r14
     82e:	b6 01       	movw	r22, r12
     830:	0e 94 90 06 	call	0xd20	; 0xd20 <__subsf3>
     834:	6b 01       	movw	r12, r22
     836:	7c 01       	movw	r14, r24
     838:	be 01       	movw	r22, r28
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatunsisf>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c7 01       	movw	r24, r14
     848:	b6 01       	movw	r22, r12
     84a:	0e 94 02 07 	call	0xe04	; 0xe04 <__divsf3>
     84e:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <acceleration>
     852:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <acceleration+0x1>
     856:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <acceleration+0x2>
     85a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <acceleration+0x3>
		//reset the counter
		count10us = 0;
     85e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     862:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		startTimer1();
     866:	0e 94 3c 05 	call	0xa78	; 0xa78 <startTimer1>
	}
}
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <__vector_2>:

//External interrupt 1
ISR (INT1_vect)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
	//if a rising edge is detected when the other signal is low means a Motor position decrement
	if (!(PIND & (1 << PIND2)))
     8d6:	4a 99       	sbic	0x09, 2	; 9
     8d8:	85 c0       	rjmp	.+266    	; 0x9e4 <__stack+0xe5>
	{
		stopTimer1();
     8da:	0e 94 42 05 	call	0xa84	; 0xa84 <stopTimer1>
		motorPosition--;
     8de:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <motorPosition>
     8e2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <motorPosition+0x1>
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <motorPosition+0x1>
     8ec:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <motorPosition>
		//set the Pinion position
		pinionPosition = motorPosition / PINION_CONSTANT;
     8f0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <motorPosition>
     8f4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <motorPosition+0x1>
     8f8:	99 23       	and	r25, r25
     8fa:	0c f4       	brge	.+2      	; 0x8fe <__vector_2+0x5e>
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	95 95       	asr	r25
     900:	87 95       	ror	r24
     902:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <pinionPosition+0x1>
     906:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pinionPosition>
		//calculates the velocity and the previous velocity
		prev_velocity = velocity;
     90a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <velocity>
     90e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <velocity+0x1>
     912:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <velocity+0x2>
     916:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <velocity+0x3>
     91a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <prev_velocity>
     91e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <prev_velocity+0x1>
     922:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <prev_velocity+0x2>
     926:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <prev_velocity+0x3>
		velocity = (double)(VELOCITY_CONST / count10us);
     92a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     92e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatunsisf>
     93a:	9b 01       	movw	r18, r22
     93c:	ac 01       	movw	r20, r24
     93e:	6f ef       	ldi	r22, 0xFF	; 255
     940:	7f ef       	ldi	r23, 0xFF	; 255
     942:	87 e4       	ldi	r24, 0x47	; 71
     944:	91 e4       	ldi	r25, 0x41	; 65
     946:	0e 94 02 07 	call	0xe04	; 0xe04 <__divsf3>
     94a:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <velocity>
     94e:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <velocity+0x1>
     952:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <velocity+0x2>
     956:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <velocity+0x3>
		//calculates the acceleration, based on the current velocity and and previous velocity
		acceleration = (double)(((velocity * 100000 - prev_velocity * 100000) / count10us));
     95a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <velocity>
     95e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <velocity+0x1>
     962:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <velocity+0x2>
     966:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <velocity+0x3>
     96a:	80 90 22 01 	lds	r8, 0x0122	; 0x800122 <prev_velocity>
     96e:	90 90 23 01 	lds	r9, 0x0123	; 0x800123 <prev_velocity+0x1>
     972:	a0 90 24 01 	lds	r10, 0x0124	; 0x800124 <prev_velocity+0x2>
     976:	b0 90 25 01 	lds	r11, 0x0125	; 0x800125 <prev_velocity+0x3>
     97a:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
     97e:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e5       	ldi	r19, 0x50	; 80
     986:	43 ec       	ldi	r20, 0xC3	; 195
     988:	57 e4       	ldi	r21, 0x47	; 71
     98a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     98e:	6b 01       	movw	r12, r22
     990:	7c 01       	movw	r14, r24
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e5       	ldi	r19, 0x50	; 80
     996:	43 ec       	ldi	r20, 0xC3	; 195
     998:	57 e4       	ldi	r21, 0x47	; 71
     99a:	c5 01       	movw	r24, r10
     99c:	b4 01       	movw	r22, r8
     99e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c7 01       	movw	r24, r14
     9a8:	b6 01       	movw	r22, r12
     9aa:	0e 94 90 06 	call	0xd20	; 0xd20 <__subsf3>
     9ae:	6b 01       	movw	r12, r22
     9b0:	7c 01       	movw	r14, r24
     9b2:	be 01       	movw	r22, r28
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatunsisf>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	0e 94 02 07 	call	0xe04	; 0xe04 <__divsf3>
     9c8:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <acceleration>
     9cc:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <acceleration+0x1>
     9d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <acceleration+0x2>
     9d4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <acceleration+0x3>
		//reset the counter
		count10us = 0;
     9d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     9dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		startTimer1();
     9e0:	0e 94 3c 05 	call	0xa78	; 0xa78 <startTimer1>
	}
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <setupPorts>:
 }

 void MotorSetDuty(unsigned char duty)
 {
	//This operation is needed because the Timer is set inverting mode
	 OCR0B = MAX_PWM - duty;
     a1a:	87 b1       	in	r24, 0x07	; 7
     a1c:	83 60       	ori	r24, 0x03	; 3
     a1e:	87 b9       	out	0x07, r24	; 7
     a20:	87 b1       	in	r24, 0x07	; 7
     a22:	8c 63       	ori	r24, 0x3C	; 60
     a24:	87 b9       	out	0x07, r24	; 7
     a26:	54 9a       	sbi	0x0a, 4	; 10
     a28:	55 9a       	sbi	0x0a, 5	; 10
     a2a:	8a b1       	in	r24, 0x0a	; 10
     a2c:	80 6c       	ori	r24, 0xC0	; 192
     a2e:	8a b9       	out	0x0a, r24	; 10
     a30:	52 98       	cbi	0x0a, 2	; 10
     a32:	53 98       	cbi	0x0a, 3	; 10
     a34:	88 ef       	ldi	r24, 0xF8	; 248
     a36:	84 b9       	out	0x04, r24	; 4
     a38:	08 95       	ret

00000a3a <setupTimer0>:
     a3a:	84 b5       	in	r24, 0x24	; 36
     a3c:	83 63       	ori	r24, 0x33	; 51
     a3e:	84 bd       	out	0x24, r24	; 36
     a40:	85 b5       	in	r24, 0x25	; 37
     a42:	88 60       	ori	r24, 0x08	; 8
     a44:	85 bd       	out	0x25, r24	; 37
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	87 bd       	out	0x27, r24	; 39
     a4a:	88 bd       	out	0x28, r24	; 40
     a4c:	08 95       	ret

00000a4e <startTimer0>:
     a4e:	85 b5       	in	r24, 0x25	; 37
     a50:	84 60       	ori	r24, 0x04	; 4
     a52:	85 bd       	out	0x25, r24	; 37
     a54:	08 95       	ret

00000a56 <setupTimer1>:
     a56:	e1 e8       	ldi	r30, 0x81	; 129
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	88 60       	ori	r24, 0x08	; 8
     a5e:	80 83       	st	Z, r24
     a60:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     a64:	8f e9       	ldi	r24, 0x9F	; 159
     a66:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     a6a:	08 95       	ret

00000a6c <setupTimer1Int>:
     a6c:	ef e6       	ldi	r30, 0x6F	; 111
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 83       	st	Z, r24
     a76:	08 95       	ret

00000a78 <startTimer1>:
     a78:	e1 e8       	ldi	r30, 0x81	; 129
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	80 83       	st	Z, r24
     a82:	08 95       	ret

00000a84 <stopTimer1>:
     a84:	e1 e8       	ldi	r30, 0x81	; 129
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	88 7f       	andi	r24, 0xF8	; 248
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <setupInt0>:
     a90:	52 98       	cbi	0x0a, 2	; 10
     a92:	e9 e6       	ldi	r30, 0x69	; 105
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	83 60       	ori	r24, 0x03	; 3
     a9a:	80 83       	st	Z, r24
     a9c:	e8 9a       	sbi	0x1d, 0	; 29
     a9e:	08 95       	ret

00000aa0 <setupInt1>:
     aa0:	53 98       	cbi	0x0a, 3	; 10
     aa2:	e9 e6       	ldi	r30, 0x69	; 105
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	8c 60       	ori	r24, 0x0C	; 12
     aaa:	80 83       	st	Z, r24
     aac:	e9 9a       	sbi	0x1d, 1	; 29
     aae:	08 95       	ret

00000ab0 <setupPinChgInt>:
     ab0:	eb e6       	ldi	r30, 0x6B	; 107
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	87 60       	ori	r24, 0x07	; 7
     ab8:	80 83       	st	Z, r24
     aba:	e8 e6       	ldi	r30, 0x68	; 104
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	80 83       	st	Z, r24
     ac4:	08 95       	ret

00000ac6 <MotorSetDuty>:
     ac6:	80 95       	com	r24
     ac8:	88 bd       	out	0x28, r24	; 40
     aca:	08 95       	ret

00000acc <MotorSetDirection>:
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	29 f4       	brne	.+10     	; 0xada <MotorSetDirection+0xe>
     ad0:	8b b1       	in	r24, 0x0b	; 11
     ad2:	8f 73       	andi	r24, 0x3F	; 63
     ad4:	8b b9       	out	0x0b, r24	; 11
     ad6:	5e 9a       	sbi	0x0b, 6	; 11
     ad8:	08 95       	ret
     ada:	81 11       	cpse	r24, r1
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <MotorSetDirection+0x1a>
     ade:	8b b1       	in	r24, 0x0b	; 11
     ae0:	8f 73       	andi	r24, 0x3F	; 63
     ae2:	8b b9       	out	0x0b, r24	; 11
     ae4:	5f 9a       	sbi	0x0b, 7	; 11
     ae6:	08 95       	ret

00000ae8 <MotorSetup>:
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 66 05 	call	0xacc	; 0xacc <MotorSetDirection>
     aee:	0e 94 2b 05 	call	0xa56	; 0xa56 <setupTimer1>
     af2:	0e 94 36 05 	call	0xa6c	; 0xa6c <setupTimer1Int>
     af6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <setupTimer0>
     afa:	0e 94 48 05 	call	0xa90	; 0xa90 <setupInt0>
     afe:	0e 94 50 05 	call	0xaa0	; 0xaa0 <setupInt1>
     b02:	0e 94 58 05 	call	0xab0	; 0xab0 <setupPinChgInt>
     b06:	78 94       	sei
     b08:	08 95       	ret

00000b0a <getDirection>:
	MotorSetDuty(0);
 }

 //get the necessary direction based on the reference position and the actual position
unsigned int getDirection(int ref, int pos)
 {
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	68 17       	cp	r22, r24
     b10:	79 07       	cpc	r23, r25
     b12:	14 f0       	brlt	.+4      	; 0xb18 <getDirection+0xe>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
	if (ref > pos)
		return (1);
	else
		return (0);
 }
     b18:	c9 01       	movw	r24, r18
     b1a:	08 95       	ret

00000b1c <getError>:
 //Get the error = Set_Point - Process_Variable
 int getError(int sp, int pv)
 {
	int aux = sp * PINION_CONSTANT;

	if (sp > RACK_TEETH)
     b1c:	8f 33       	cpi	r24, 0x3F	; 63
     b1e:	91 05       	cpc	r25, r1
     b20:	24 f4       	brge	.+8      	; 0xb2a <getError+0xe>


 //Get the error = Set_Point - Process_Variable
 int getError(int sp, int pv)
 {
	int aux = sp * PINION_CONSTANT;
     b22:	9c 01       	movw	r18, r24
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <getError+0x12>

	if (sp > RACK_TEETH)
		aux = MAX_POSITION;
     b2a:	2c e7       	ldi	r18, 0x7C	; 124
     b2c:	30 e0       	ldi	r19, 0x00	; 0
	if (sp < 0)
     b2e:	99 23       	and	r25, r25
     b30:	14 f4       	brge	.+4      	; 0xb36 <getError+0x1a>
		aux = 0;
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0

	return (aux - pv);
 }
     b36:	c9 01       	movw	r24, r18
     b38:	86 1b       	sub	r24, r22
     b3a:	97 0b       	sbc	r25, r23
     b3c:	08 95       	ret

00000b3e <getPIDdrive>:

 //Get the necessary PID drive
 int getPIDdrive(int error, int prev_error, double *errorI)
 {
     b3e:	2f 92       	push	r2
     b40:	3f 92       	push	r3
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	ec 01       	movw	r28, r24
     b64:	1b 01       	movw	r2, r22
     b66:	8a 01       	movw	r16, r20
	double aux_errorI = *errorI;
     b68:	fa 01       	movw	r30, r20
     b6a:	c0 80       	ld	r12, Z
     b6c:	d1 80       	ldd	r13, Z+1	; 0x01
     b6e:	e2 80       	ldd	r14, Z+2	; 0x02
     b70:	f3 80       	ldd	r15, Z+3	; 0x03
	double drvP, drvI, drvD, drvPID;

	//Proportional Drive
	drvP = (double)(error * KP);
     b72:	bc 01       	movw	r22, r24
     b74:	99 0f       	add	r25, r25
     b76:	88 0b       	sbc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatsisf>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     b8e:	2b 01       	movw	r4, r22
     b90:	3c 01       	movw	r6, r24

	//the Integral Drive will have a contribution only when the error is not very large
	//The integral will control the DC error
	if (aux_errorI < IMAX_LIM && aux_errorI > -IMAX_LIM && error != 0)
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e8       	ldi	r20, 0x80	; 128
     b98:	50 e4       	ldi	r21, 0x40	; 64
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__cmpsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	f4 f4       	brge	.+60     	; 0xbe2 <getPIDdrive+0xa4>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e8       	ldi	r20, 0x80	; 128
     bac:	50 ec       	ldi	r21, 0xC0	; 192
     bae:	c7 01       	movw	r24, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__gesf2>
     bb6:	18 16       	cp	r1, r24
     bb8:	c4 f4       	brge	.+48     	; 0xbea <getPIDdrive+0xac>
     bba:	20 97       	sbiw	r28, 0x00	; 0
     bbc:	d1 f0       	breq	.+52     	; 0xbf2 <getPIDdrive+0xb4>
	{
		aux_errorI += error;
     bbe:	a5 01       	movw	r20, r10
     bc0:	94 01       	movw	r18, r8
     bc2:	c7 01       	movw	r24, r14
     bc4:	b6 01       	movw	r22, r12
     bc6:	0e 94 91 06 	call	0xd22	; 0xd22 <__addsf3>
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
	else
	{
		aux_errorI = 0;
	}
	//The integral error is limited
	if (aux_errorI > (double)(5 / KI))
     bce:	25 e5       	ldi	r18, 0x55	; 85
     bd0:	35 e5       	ldi	r19, 0x55	; 85
     bd2:	45 e0       	ldi	r20, 0x05	; 5
     bd4:	52 e4       	ldi	r21, 0x42	; 66
     bd6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__gesf2>
     bda:	18 16       	cp	r1, r24
     bdc:	0c f4       	brge	.+2      	; 0xbe0 <getPIDdrive+0xa2>
     bde:	76 c0       	rjmp	.+236    	; 0xccc <getPIDdrive+0x18e>
     be0:	6a c0       	rjmp	.+212    	; 0xcb6 <getPIDdrive+0x178>
     be2:	c1 2c       	mov	r12, r1
     be4:	d1 2c       	mov	r13, r1
     be6:	76 01       	movw	r14, r12
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <getPIDdrive+0xba>
     bea:	c1 2c       	mov	r12, r1
     bec:	d1 2c       	mov	r13, r1
     bee:	76 01       	movw	r14, r12
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <getPIDdrive+0xba>
     bf2:	c1 2c       	mov	r12, r1
     bf4:	d1 2c       	mov	r13, r1
     bf6:	76 01       	movw	r14, r12
	}
	if (aux_errorI < -(double)(5 / KI))
	{
		aux_errorI = -(double)(5 / KI);
	}
	*errorI = aux_errorI;
     bf8:	f8 01       	movw	r30, r16
     bfa:	c0 82       	st	Z, r12
     bfc:	d1 82       	std	Z+1, r13	; 0x01
     bfe:	e2 82       	std	Z+2, r14	; 0x02
     c00:	f3 82       	std	Z+3, r15	; 0x03
	//Integral Drive
	drvI = (double)(KI * aux_errorI);
     c02:	2a e9       	ldi	r18, 0x9A	; 154
     c04:	39 e9       	ldi	r19, 0x99	; 153
     c06:	49 e1       	ldi	r20, 0x19	; 25
     c08:	5e e3       	ldi	r21, 0x3E	; 62
     c0a:	c7 01       	movw	r24, r14
     c0c:	b6 01       	movw	r22, r12
     c0e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24

	//if the error is 0, then the derivative drive will not have a contribution
	if (error == 0)
     c16:	20 97       	sbiw	r28, 0x00	; 0
     c18:	89 f0       	breq	.+34     	; 0xc3c <getPIDdrive+0xfe>
		drvD = 0;
	}
	else
	{
		//Derivative Drive, acting on past errors
		drvD = (double)((error - prev_error) * KD);
     c1a:	c2 19       	sub	r28, r2
     c1c:	d3 09       	sbc	r29, r3
     c1e:	be 01       	movw	r22, r28
     c20:	dd 0f       	add	r29, r29
     c22:	88 0b       	sbc	r24, r24
     c24:	99 0b       	sbc	r25, r25
     c26:	0e 94 ac 07 	call	0xf58	; 0xf58 <__floatsisf>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	5f e3       	ldi	r21, 0x3F	; 63
     c32:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3>
     c36:	4b 01       	movw	r8, r22
     c38:	5c 01       	movw	r10, r24
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <getPIDdrive+0x104>
	drvI = (double)(KI * aux_errorI);

	//if the error is 0, then the derivative drive will not have a contribution
	if (error == 0)
	{
		drvD = 0;
     c3c:	81 2c       	mov	r8, r1
     c3e:	91 2c       	mov	r9, r1
     c40:	54 01       	movw	r10, r8
		//Derivative Drive, acting on past errors
		drvD = (double)((error - prev_error) * KD);
	}

	//The final necessary drive
	drvPID = drvP + drvI + drvD;
     c42:	a7 01       	movw	r20, r14
     c44:	96 01       	movw	r18, r12
     c46:	c3 01       	movw	r24, r6
     c48:	b2 01       	movw	r22, r4
     c4a:	0e 94 91 06 	call	0xd22	; 0xd22 <__addsf3>
     c4e:	a5 01       	movw	r20, r10
     c50:	94 01       	movw	r18, r8
     c52:	0e 94 91 06 	call	0xd22	; 0xd22 <__addsf3>
     c56:	6b 01       	movw	r12, r22
     c58:	7c 01       	movw	r14, r24
	if (drvPID < 0)
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	a9 01       	movw	r20, r18
     c60:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__cmpsf2>
     c64:	88 23       	and	r24, r24
     c66:	24 f4       	brge	.+8      	; 0xc70 <getPIDdrive+0x132>
		drvPID *= -1;
     c68:	f7 fa       	bst	r15, 7
     c6a:	f0 94       	com	r15
     c6c:	f7 f8       	bld	r15, 7
     c6e:	f0 94       	com	r15
	if ((int)(drvPID) > MAX_PWM)
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 74 07 	call	0xee8	; 0xee8 <__fixsfsi>
     c78:	6f 3f       	cpi	r22, 0xFF	; 255
     c7a:	71 05       	cpc	r23, r1
     c7c:	c9 f1       	breq	.+114    	; 0xcf0 <getPIDdrive+0x1b2>
     c7e:	c4 f1       	brlt	.+112    	; 0xcf0 <getPIDdrive+0x1b2>
		 drvPID = MAX_PWM;
     c80:	0f 2e       	mov	r0, r31
     c82:	c1 2c       	mov	r12, r1
     c84:	d1 2c       	mov	r13, r1
     c86:	ff e7       	ldi	r31, 0x7F	; 127
     c88:	ef 2e       	mov	r14, r31
     c8a:	f3 e4       	ldi	r31, 0x43	; 67
     c8c:	ff 2e       	mov	r15, r31
     c8e:	f0 2d       	mov	r31, r0
     c90:	2f c0       	rjmp	.+94     	; 0xcf0 <getPIDdrive+0x1b2>
	}
	if (aux_errorI < -(double)(5 / KI))
	{
		aux_errorI = -(double)(5 / KI);
	}
	*errorI = aux_errorI;
     c92:	85 e5       	ldi	r24, 0x55	; 85
     c94:	95 e5       	ldi	r25, 0x55	; 85
     c96:	a5 e0       	ldi	r26, 0x05	; 5
     c98:	b2 ec       	ldi	r27, 0xC2	; 194
     c9a:	f8 01       	movw	r30, r16
     c9c:	80 83       	st	Z, r24
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	a2 83       	std	Z+2, r26	; 0x02
     ca2:	b3 83       	std	Z+3, r27	; 0x03
	//Integral Drive
	drvI = (double)(KI * aux_errorI);
     ca4:	0f 2e       	mov	r0, r31
     ca6:	c1 2c       	mov	r12, r1
     ca8:	d1 2c       	mov	r13, r1
     caa:	f0 ea       	ldi	r31, 0xA0	; 160
     cac:	ef 2e       	mov	r14, r31
     cae:	f0 ec       	ldi	r31, 0xC0	; 192
     cb0:	ff 2e       	mov	r15, r31
     cb2:	f0 2d       	mov	r31, r0
     cb4:	b2 cf       	rjmp	.-156    	; 0xc1a <getPIDdrive+0xdc>
	//The integral error is limited
	if (aux_errorI > (double)(5 / KI))
	{
		aux_errorI = (double)(5 / KI);
	}
	if (aux_errorI < -(double)(5 / KI))
     cb6:	25 e5       	ldi	r18, 0x55	; 85
     cb8:	35 e5       	ldi	r19, 0x55	; 85
     cba:	45 e0       	ldi	r20, 0x05	; 5
     cbc:	52 ec       	ldi	r21, 0xC2	; 194
     cbe:	c7 01       	movw	r24, r14
     cc0:	b6 01       	movw	r22, r12
     cc2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	24 f3       	brlt	.-56     	; 0xc92 <getPIDdrive+0x154>
     cca:	96 cf       	rjmp	.-212    	; 0xbf8 <getPIDdrive+0xba>
	{
		aux_errorI = -(double)(5 / KI);
	}
	*errorI = aux_errorI;
     ccc:	85 e5       	ldi	r24, 0x55	; 85
     cce:	95 e5       	ldi	r25, 0x55	; 85
     cd0:	a5 e0       	ldi	r26, 0x05	; 5
     cd2:	b2 e4       	ldi	r27, 0x42	; 66
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 83       	st	Z, r24
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	a2 83       	std	Z+2, r26	; 0x02
     cdc:	b3 83       	std	Z+3, r27	; 0x03
	//Integral Drive
	drvI = (double)(KI * aux_errorI);
     cde:	0f 2e       	mov	r0, r31
     ce0:	c1 2c       	mov	r12, r1
     ce2:	d1 2c       	mov	r13, r1
     ce4:	f0 ea       	ldi	r31, 0xA0	; 160
     ce6:	ef 2e       	mov	r14, r31
     ce8:	f0 e4       	ldi	r31, 0x40	; 64
     cea:	ff 2e       	mov	r15, r31
     cec:	f0 2d       	mov	r31, r0
     cee:	95 cf       	rjmp	.-214    	; 0xc1a <getPIDdrive+0xdc>
	if (drvPID < 0)
		drvPID *= -1;
	if ((int)(drvPID) > MAX_PWM)
		 drvPID = MAX_PWM;

	return ((int)(drvPID));
     cf0:	c7 01       	movw	r24, r14
     cf2:	b6 01       	movw	r22, r12
     cf4:	0e 94 74 07 	call	0xee8	; 0xee8 <__fixsfsi>
     cf8:	cb 01       	movw	r24, r22
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	7f 90       	pop	r7
     d14:	6f 90       	pop	r6
     d16:	5f 90       	pop	r5
     d18:	4f 90       	pop	r4
     d1a:	3f 90       	pop	r3
     d1c:	2f 90       	pop	r2
     d1e:	08 95       	ret

00000d20 <__subsf3>:
     d20:	50 58       	subi	r21, 0x80	; 128

00000d22 <__addsf3>:
     d22:	bb 27       	eor	r27, r27
     d24:	aa 27       	eor	r26, r26
     d26:	0e 94 a8 06 	call	0xd50	; 0xd50 <__addsf3x>
     d2a:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_round>
     d2e:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_pscA>
     d32:	38 f0       	brcs	.+14     	; 0xd42 <__addsf3+0x20>
     d34:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_pscB>
     d38:	20 f0       	brcs	.+8      	; 0xd42 <__addsf3+0x20>
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__addsf3+0x28>
     d3c:	9f 3f       	cpi	r25, 0xFF	; 255
     d3e:	19 f4       	brne	.+6      	; 0xd46 <__addsf3+0x24>
     d40:	26 f4       	brtc	.+8      	; 0xd4a <__addsf3+0x28>
     d42:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>
     d46:	0e f4       	brtc	.+2      	; 0xd4a <__addsf3+0x28>
     d48:	e0 95       	com	r30
     d4a:	e7 fb       	bst	r30, 7
     d4c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>

00000d50 <__addsf3x>:
     d50:	e9 2f       	mov	r30, r25
     d52:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_split3>
     d56:	58 f3       	brcs	.-42     	; 0xd2e <__addsf3+0xc>
     d58:	ba 17       	cp	r27, r26
     d5a:	62 07       	cpc	r22, r18
     d5c:	73 07       	cpc	r23, r19
     d5e:	84 07       	cpc	r24, r20
     d60:	95 07       	cpc	r25, r21
     d62:	20 f0       	brcs	.+8      	; 0xd6c <__addsf3x+0x1c>
     d64:	79 f4       	brne	.+30     	; 0xd84 <__addsf3x+0x34>
     d66:	a6 f5       	brtc	.+104    	; 0xdd0 <__addsf3x+0x80>
     d68:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_zero>
     d6c:	0e f4       	brtc	.+2      	; 0xd70 <__addsf3x+0x20>
     d6e:	e0 95       	com	r30
     d70:	0b 2e       	mov	r0, r27
     d72:	ba 2f       	mov	r27, r26
     d74:	a0 2d       	mov	r26, r0
     d76:	0b 01       	movw	r0, r22
     d78:	b9 01       	movw	r22, r18
     d7a:	90 01       	movw	r18, r0
     d7c:	0c 01       	movw	r0, r24
     d7e:	ca 01       	movw	r24, r20
     d80:	a0 01       	movw	r20, r0
     d82:	11 24       	eor	r1, r1
     d84:	ff 27       	eor	r31, r31
     d86:	59 1b       	sub	r21, r25
     d88:	99 f0       	breq	.+38     	; 0xdb0 <__addsf3x+0x60>
     d8a:	59 3f       	cpi	r21, 0xF9	; 249
     d8c:	50 f4       	brcc	.+20     	; 0xda2 <__addsf3x+0x52>
     d8e:	50 3e       	cpi	r21, 0xE0	; 224
     d90:	68 f1       	brcs	.+90     	; 0xdec <__addsf3x+0x9c>
     d92:	1a 16       	cp	r1, r26
     d94:	f0 40       	sbci	r31, 0x00	; 0
     d96:	a2 2f       	mov	r26, r18
     d98:	23 2f       	mov	r18, r19
     d9a:	34 2f       	mov	r19, r20
     d9c:	44 27       	eor	r20, r20
     d9e:	58 5f       	subi	r21, 0xF8	; 248
     da0:	f3 cf       	rjmp	.-26     	; 0xd88 <__addsf3x+0x38>
     da2:	46 95       	lsr	r20
     da4:	37 95       	ror	r19
     da6:	27 95       	ror	r18
     da8:	a7 95       	ror	r26
     daa:	f0 40       	sbci	r31, 0x00	; 0
     dac:	53 95       	inc	r21
     dae:	c9 f7       	brne	.-14     	; 0xda2 <__addsf3x+0x52>
     db0:	7e f4       	brtc	.+30     	; 0xdd0 <__addsf3x+0x80>
     db2:	1f 16       	cp	r1, r31
     db4:	ba 0b       	sbc	r27, r26
     db6:	62 0b       	sbc	r22, r18
     db8:	73 0b       	sbc	r23, r19
     dba:	84 0b       	sbc	r24, r20
     dbc:	ba f0       	brmi	.+46     	; 0xdec <__addsf3x+0x9c>
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	a1 f0       	breq	.+40     	; 0xdea <__addsf3x+0x9a>
     dc2:	ff 0f       	add	r31, r31
     dc4:	bb 1f       	adc	r27, r27
     dc6:	66 1f       	adc	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	c2 f7       	brpl	.-16     	; 0xdbe <__addsf3x+0x6e>
     dce:	0e c0       	rjmp	.+28     	; 0xdec <__addsf3x+0x9c>
     dd0:	ba 0f       	add	r27, r26
     dd2:	62 1f       	adc	r22, r18
     dd4:	73 1f       	adc	r23, r19
     dd6:	84 1f       	adc	r24, r20
     dd8:	48 f4       	brcc	.+18     	; 0xdec <__addsf3x+0x9c>
     dda:	87 95       	ror	r24
     ddc:	77 95       	ror	r23
     dde:	67 95       	ror	r22
     de0:	b7 95       	ror	r27
     de2:	f7 95       	ror	r31
     de4:	9e 3f       	cpi	r25, 0xFE	; 254
     de6:	08 f0       	brcs	.+2      	; 0xdea <__addsf3x+0x9a>
     de8:	b0 cf       	rjmp	.-160    	; 0xd4a <__addsf3+0x28>
     dea:	93 95       	inc	r25
     dec:	88 0f       	add	r24, r24
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <__addsf3x+0xa2>
     df0:	99 27       	eor	r25, r25
     df2:	ee 0f       	add	r30, r30
     df4:	97 95       	ror	r25
     df6:	87 95       	ror	r24
     df8:	08 95       	ret

00000dfa <__cmpsf2>:
     dfa:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_cmp>
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <__cmpsf2+0x8>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	08 95       	ret

00000e04 <__divsf3>:
     e04:	0e 94 16 07 	call	0xe2c	; 0xe2c <__divsf3x>
     e08:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_round>
     e0c:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_pscB>
     e10:	58 f0       	brcs	.+22     	; 0xe28 <__divsf3+0x24>
     e12:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_pscA>
     e16:	40 f0       	brcs	.+16     	; 0xe28 <__divsf3+0x24>
     e18:	29 f4       	brne	.+10     	; 0xe24 <__divsf3+0x20>
     e1a:	5f 3f       	cpi	r21, 0xFF	; 255
     e1c:	29 f0       	breq	.+10     	; 0xe28 <__divsf3+0x24>
     e1e:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
     e22:	51 11       	cpse	r21, r1
     e24:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>
     e28:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>

00000e2c <__divsf3x>:
     e2c:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_split3>
     e30:	68 f3       	brcs	.-38     	; 0xe0c <__divsf3+0x8>

00000e32 <__divsf3_pse>:
     e32:	99 23       	and	r25, r25
     e34:	b1 f3       	breq	.-20     	; 0xe22 <__divsf3+0x1e>
     e36:	55 23       	and	r21, r21
     e38:	91 f3       	breq	.-28     	; 0xe1e <__divsf3+0x1a>
     e3a:	95 1b       	sub	r25, r21
     e3c:	55 0b       	sbc	r21, r21
     e3e:	bb 27       	eor	r27, r27
     e40:	aa 27       	eor	r26, r26
     e42:	62 17       	cp	r22, r18
     e44:	73 07       	cpc	r23, r19
     e46:	84 07       	cpc	r24, r20
     e48:	38 f0       	brcs	.+14     	; 0xe58 <__divsf3_pse+0x26>
     e4a:	9f 5f       	subi	r25, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	44 1f       	adc	r20, r20
     e54:	aa 1f       	adc	r26, r26
     e56:	a9 f3       	breq	.-22     	; 0xe42 <__divsf3_pse+0x10>
     e58:	35 d0       	rcall	.+106    	; 0xec4 <__divsf3_pse+0x92>
     e5a:	0e 2e       	mov	r0, r30
     e5c:	3a f0       	brmi	.+14     	; 0xe6c <__divsf3_pse+0x3a>
     e5e:	e0 e8       	ldi	r30, 0x80	; 128
     e60:	32 d0       	rcall	.+100    	; 0xec6 <__divsf3_pse+0x94>
     e62:	91 50       	subi	r25, 0x01	; 1
     e64:	50 40       	sbci	r21, 0x00	; 0
     e66:	e6 95       	lsr	r30
     e68:	00 1c       	adc	r0, r0
     e6a:	ca f7       	brpl	.-14     	; 0xe5e <__divsf3_pse+0x2c>
     e6c:	2b d0       	rcall	.+86     	; 0xec4 <__divsf3_pse+0x92>
     e6e:	fe 2f       	mov	r31, r30
     e70:	29 d0       	rcall	.+82     	; 0xec4 <__divsf3_pse+0x92>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	bb 1f       	adc	r27, r27
     e7a:	26 17       	cp	r18, r22
     e7c:	37 07       	cpc	r19, r23
     e7e:	48 07       	cpc	r20, r24
     e80:	ab 07       	cpc	r26, r27
     e82:	b0 e8       	ldi	r27, 0x80	; 128
     e84:	09 f0       	breq	.+2      	; 0xe88 <__divsf3_pse+0x56>
     e86:	bb 0b       	sbc	r27, r27
     e88:	80 2d       	mov	r24, r0
     e8a:	bf 01       	movw	r22, r30
     e8c:	ff 27       	eor	r31, r31
     e8e:	93 58       	subi	r25, 0x83	; 131
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	3a f0       	brmi	.+14     	; 0xea2 <__divsf3_pse+0x70>
     e94:	9e 3f       	cpi	r25, 0xFE	; 254
     e96:	51 05       	cpc	r21, r1
     e98:	78 f0       	brcs	.+30     	; 0xeb8 <__divsf3_pse+0x86>
     e9a:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
     e9e:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>
     ea2:	5f 3f       	cpi	r21, 0xFF	; 255
     ea4:	e4 f3       	brlt	.-8      	; 0xe9e <__divsf3_pse+0x6c>
     ea6:	98 3e       	cpi	r25, 0xE8	; 232
     ea8:	d4 f3       	brlt	.-12     	; 0xe9e <__divsf3_pse+0x6c>
     eaa:	86 95       	lsr	r24
     eac:	77 95       	ror	r23
     eae:	67 95       	ror	r22
     eb0:	b7 95       	ror	r27
     eb2:	f7 95       	ror	r31
     eb4:	9f 5f       	subi	r25, 0xFF	; 255
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <__divsf3_pse+0x78>
     eb8:	88 0f       	add	r24, r24
     eba:	91 1d       	adc	r25, r1
     ebc:	96 95       	lsr	r25
     ebe:	87 95       	ror	r24
     ec0:	97 f9       	bld	r25, 7
     ec2:	08 95       	ret
     ec4:	e1 e0       	ldi	r30, 0x01	; 1
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	bb 1f       	adc	r27, r27
     ece:	62 17       	cp	r22, r18
     ed0:	73 07       	cpc	r23, r19
     ed2:	84 07       	cpc	r24, r20
     ed4:	ba 07       	cpc	r27, r26
     ed6:	20 f0       	brcs	.+8      	; 0xee0 <__divsf3_pse+0xae>
     ed8:	62 1b       	sub	r22, r18
     eda:	73 0b       	sbc	r23, r19
     edc:	84 0b       	sbc	r24, r20
     ede:	ba 0b       	sbc	r27, r26
     ee0:	ee 1f       	adc	r30, r30
     ee2:	88 f7       	brcc	.-30     	; 0xec6 <__divsf3_pse+0x94>
     ee4:	e0 95       	com	r30
     ee6:	08 95       	ret

00000ee8 <__fixsfsi>:
     ee8:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fixunssfsi>
     eec:	68 94       	set
     eee:	b1 11       	cpse	r27, r1
     ef0:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>
     ef4:	08 95       	ret

00000ef6 <__fixunssfsi>:
     ef6:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_splitA>
     efa:	88 f0       	brcs	.+34     	; 0xf1e <__fixunssfsi+0x28>
     efc:	9f 57       	subi	r25, 0x7F	; 127
     efe:	98 f0       	brcs	.+38     	; 0xf26 <__fixunssfsi+0x30>
     f00:	b9 2f       	mov	r27, r25
     f02:	99 27       	eor	r25, r25
     f04:	b7 51       	subi	r27, 0x17	; 23
     f06:	b0 f0       	brcs	.+44     	; 0xf34 <__fixunssfsi+0x3e>
     f08:	e1 f0       	breq	.+56     	; 0xf42 <__fixunssfsi+0x4c>
     f0a:	66 0f       	add	r22, r22
     f0c:	77 1f       	adc	r23, r23
     f0e:	88 1f       	adc	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	1a f0       	brmi	.+6      	; 0xf1a <__fixunssfsi+0x24>
     f14:	ba 95       	dec	r27
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__fixunssfsi+0x14>
     f18:	14 c0       	rjmp	.+40     	; 0xf42 <__fixunssfsi+0x4c>
     f1a:	b1 30       	cpi	r27, 0x01	; 1
     f1c:	91 f0       	breq	.+36     	; 0xf42 <__fixunssfsi+0x4c>
     f1e:	0e 94 55 08 	call	0x10aa	; 0x10aa <__fp_zero>
     f22:	b1 e0       	ldi	r27, 0x01	; 1
     f24:	08 95       	ret
     f26:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_zero>
     f2a:	67 2f       	mov	r22, r23
     f2c:	78 2f       	mov	r23, r24
     f2e:	88 27       	eor	r24, r24
     f30:	b8 5f       	subi	r27, 0xF8	; 248
     f32:	39 f0       	breq	.+14     	; 0xf42 <__fixunssfsi+0x4c>
     f34:	b9 3f       	cpi	r27, 0xF9	; 249
     f36:	cc f3       	brlt	.-14     	; 0xf2a <__fixunssfsi+0x34>
     f38:	86 95       	lsr	r24
     f3a:	77 95       	ror	r23
     f3c:	67 95       	ror	r22
     f3e:	b3 95       	inc	r27
     f40:	d9 f7       	brne	.-10     	; 0xf38 <__fixunssfsi+0x42>
     f42:	3e f4       	brtc	.+14     	; 0xf52 <__fixunssfsi+0x5c>
     f44:	90 95       	com	r25
     f46:	80 95       	com	r24
     f48:	70 95       	com	r23
     f4a:	61 95       	neg	r22
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	08 95       	ret

00000f54 <__floatunsisf>:
     f54:	e8 94       	clt
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <__floatsisf+0x12>

00000f58 <__floatsisf>:
     f58:	97 fb       	bst	r25, 7
     f5a:	3e f4       	brtc	.+14     	; 0xf6a <__floatsisf+0x12>
     f5c:	90 95       	com	r25
     f5e:	80 95       	com	r24
     f60:	70 95       	com	r23
     f62:	61 95       	neg	r22
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	99 23       	and	r25, r25
     f6c:	a9 f0       	breq	.+42     	; 0xf98 <__floatsisf+0x40>
     f6e:	f9 2f       	mov	r31, r25
     f70:	96 e9       	ldi	r25, 0x96	; 150
     f72:	bb 27       	eor	r27, r27
     f74:	93 95       	inc	r25
     f76:	f6 95       	lsr	r31
     f78:	87 95       	ror	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b7 95       	ror	r27
     f80:	f1 11       	cpse	r31, r1
     f82:	f8 cf       	rjmp	.-16     	; 0xf74 <__floatsisf+0x1c>
     f84:	fa f4       	brpl	.+62     	; 0xfc4 <__floatsisf+0x6c>
     f86:	bb 0f       	add	r27, r27
     f88:	11 f4       	brne	.+4      	; 0xf8e <__floatsisf+0x36>
     f8a:	60 ff       	sbrs	r22, 0
     f8c:	1b c0       	rjmp	.+54     	; 0xfc4 <__floatsisf+0x6c>
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	8f 4f       	sbci	r24, 0xFF	; 255
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	16 c0       	rjmp	.+44     	; 0xfc4 <__floatsisf+0x6c>
     f98:	88 23       	and	r24, r24
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <__floatsisf+0x48>
     f9c:	96 e9       	ldi	r25, 0x96	; 150
     f9e:	11 c0       	rjmp	.+34     	; 0xfc2 <__floatsisf+0x6a>
     fa0:	77 23       	and	r23, r23
     fa2:	21 f0       	breq	.+8      	; 0xfac <__floatsisf+0x54>
     fa4:	9e e8       	ldi	r25, 0x8E	; 142
     fa6:	87 2f       	mov	r24, r23
     fa8:	76 2f       	mov	r23, r22
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <__floatsisf+0x5e>
     fac:	66 23       	and	r22, r22
     fae:	71 f0       	breq	.+28     	; 0xfcc <__floatsisf+0x74>
     fb0:	96 e8       	ldi	r25, 0x86	; 134
     fb2:	86 2f       	mov	r24, r22
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	2a f0       	brmi	.+10     	; 0xfc4 <__floatsisf+0x6c>
     fba:	9a 95       	dec	r25
     fbc:	66 0f       	add	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	88 1f       	adc	r24, r24
     fc2:	da f7       	brpl	.-10     	; 0xfba <__floatsisf+0x62>
     fc4:	88 0f       	add	r24, r24
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	97 f9       	bld	r25, 7
     fcc:	08 95       	ret

00000fce <__fp_cmp>:
     fce:	99 0f       	add	r25, r25
     fd0:	00 08       	sbc	r0, r0
     fd2:	55 0f       	add	r21, r21
     fd4:	aa 0b       	sbc	r26, r26
     fd6:	e0 e8       	ldi	r30, 0x80	; 128
     fd8:	fe ef       	ldi	r31, 0xFE	; 254
     fda:	16 16       	cp	r1, r22
     fdc:	17 06       	cpc	r1, r23
     fde:	e8 07       	cpc	r30, r24
     fe0:	f9 07       	cpc	r31, r25
     fe2:	c0 f0       	brcs	.+48     	; 0x1014 <__fp_cmp+0x46>
     fe4:	12 16       	cp	r1, r18
     fe6:	13 06       	cpc	r1, r19
     fe8:	e4 07       	cpc	r30, r20
     fea:	f5 07       	cpc	r31, r21
     fec:	98 f0       	brcs	.+38     	; 0x1014 <__fp_cmp+0x46>
     fee:	62 1b       	sub	r22, r18
     ff0:	73 0b       	sbc	r23, r19
     ff2:	84 0b       	sbc	r24, r20
     ff4:	95 0b       	sbc	r25, r21
     ff6:	39 f4       	brne	.+14     	; 0x1006 <__fp_cmp+0x38>
     ff8:	0a 26       	eor	r0, r26
     ffa:	61 f0       	breq	.+24     	; 0x1014 <__fp_cmp+0x46>
     ffc:	23 2b       	or	r18, r19
     ffe:	24 2b       	or	r18, r20
    1000:	25 2b       	or	r18, r21
    1002:	21 f4       	brne	.+8      	; 0x100c <__fp_cmp+0x3e>
    1004:	08 95       	ret
    1006:	0a 26       	eor	r0, r26
    1008:	09 f4       	brne	.+2      	; 0x100c <__fp_cmp+0x3e>
    100a:	a1 40       	sbci	r26, 0x01	; 1
    100c:	a6 95       	lsr	r26
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	81 1d       	adc	r24, r1
    1012:	81 1d       	adc	r24, r1
    1014:	08 95       	ret

00001016 <__fp_inf>:
    1016:	97 f9       	bld	r25, 7
    1018:	9f 67       	ori	r25, 0x7F	; 127
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	08 95       	ret

00001022 <__fp_nan>:
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	80 ec       	ldi	r24, 0xC0	; 192
    1026:	08 95       	ret

00001028 <__fp_pscA>:
    1028:	00 24       	eor	r0, r0
    102a:	0a 94       	dec	r0
    102c:	16 16       	cp	r1, r22
    102e:	17 06       	cpc	r1, r23
    1030:	18 06       	cpc	r1, r24
    1032:	09 06       	cpc	r0, r25
    1034:	08 95       	ret

00001036 <__fp_pscB>:
    1036:	00 24       	eor	r0, r0
    1038:	0a 94       	dec	r0
    103a:	12 16       	cp	r1, r18
    103c:	13 06       	cpc	r1, r19
    103e:	14 06       	cpc	r1, r20
    1040:	05 06       	cpc	r0, r21
    1042:	08 95       	ret

00001044 <__fp_round>:
    1044:	09 2e       	mov	r0, r25
    1046:	03 94       	inc	r0
    1048:	00 0c       	add	r0, r0
    104a:	11 f4       	brne	.+4      	; 0x1050 <__fp_round+0xc>
    104c:	88 23       	and	r24, r24
    104e:	52 f0       	brmi	.+20     	; 0x1064 <__fp_round+0x20>
    1050:	bb 0f       	add	r27, r27
    1052:	40 f4       	brcc	.+16     	; 0x1064 <__fp_round+0x20>
    1054:	bf 2b       	or	r27, r31
    1056:	11 f4       	brne	.+4      	; 0x105c <__fp_round+0x18>
    1058:	60 ff       	sbrs	r22, 0
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <__fp_round+0x20>
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	08 95       	ret

00001066 <__fp_split3>:
    1066:	57 fd       	sbrc	r21, 7
    1068:	90 58       	subi	r25, 0x80	; 128
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	59 f0       	breq	.+22     	; 0x1086 <__fp_splitA+0x10>
    1070:	5f 3f       	cpi	r21, 0xFF	; 255
    1072:	71 f0       	breq	.+28     	; 0x1090 <__fp_splitA+0x1a>
    1074:	47 95       	ror	r20

00001076 <__fp_splitA>:
    1076:	88 0f       	add	r24, r24
    1078:	97 fb       	bst	r25, 7
    107a:	99 1f       	adc	r25, r25
    107c:	61 f0       	breq	.+24     	; 0x1096 <__fp_splitA+0x20>
    107e:	9f 3f       	cpi	r25, 0xFF	; 255
    1080:	79 f0       	breq	.+30     	; 0x10a0 <__fp_splitA+0x2a>
    1082:	87 95       	ror	r24
    1084:	08 95       	ret
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	14 06       	cpc	r1, r20
    108c:	55 1f       	adc	r21, r21
    108e:	f2 cf       	rjmp	.-28     	; 0x1074 <__fp_split3+0xe>
    1090:	46 95       	lsr	r20
    1092:	f1 df       	rcall	.-30     	; 0x1076 <__fp_splitA>
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <__fp_splitA+0x30>
    1096:	16 16       	cp	r1, r22
    1098:	17 06       	cpc	r1, r23
    109a:	18 06       	cpc	r1, r24
    109c:	99 1f       	adc	r25, r25
    109e:	f1 cf       	rjmp	.-30     	; 0x1082 <__fp_splitA+0xc>
    10a0:	86 95       	lsr	r24
    10a2:	71 05       	cpc	r23, r1
    10a4:	61 05       	cpc	r22, r1
    10a6:	08 94       	sec
    10a8:	08 95       	ret

000010aa <__fp_zero>:
    10aa:	e8 94       	clt

000010ac <__fp_szero>:
    10ac:	bb 27       	eor	r27, r27
    10ae:	66 27       	eor	r22, r22
    10b0:	77 27       	eor	r23, r23
    10b2:	cb 01       	movw	r24, r22
    10b4:	97 f9       	bld	r25, 7
    10b6:	08 95       	ret

000010b8 <__gesf2>:
    10b8:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_cmp>
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <__gesf2+0x8>
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	08 95       	ret

000010c2 <__mulsf3>:
    10c2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__mulsf3x>
    10c6:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_round>
    10ca:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_pscA>
    10ce:	38 f0       	brcs	.+14     	; 0x10de <__mulsf3+0x1c>
    10d0:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_pscB>
    10d4:	20 f0       	brcs	.+8      	; 0x10de <__mulsf3+0x1c>
    10d6:	95 23       	and	r25, r21
    10d8:	11 f0       	breq	.+4      	; 0x10de <__mulsf3+0x1c>
    10da:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
    10de:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>
    10e2:	11 24       	eor	r1, r1
    10e4:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>

000010e8 <__mulsf3x>:
    10e8:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_split3>
    10ec:	70 f3       	brcs	.-36     	; 0x10ca <__mulsf3+0x8>

000010ee <__mulsf3_pse>:
    10ee:	95 9f       	mul	r25, r21
    10f0:	c1 f3       	breq	.-16     	; 0x10e2 <__mulsf3+0x20>
    10f2:	95 0f       	add	r25, r21
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	55 1f       	adc	r21, r21
    10f8:	62 9f       	mul	r22, r18
    10fa:	f0 01       	movw	r30, r0
    10fc:	72 9f       	mul	r23, r18
    10fe:	bb 27       	eor	r27, r27
    1100:	f0 0d       	add	r31, r0
    1102:	b1 1d       	adc	r27, r1
    1104:	63 9f       	mul	r22, r19
    1106:	aa 27       	eor	r26, r26
    1108:	f0 0d       	add	r31, r0
    110a:	b1 1d       	adc	r27, r1
    110c:	aa 1f       	adc	r26, r26
    110e:	64 9f       	mul	r22, r20
    1110:	66 27       	eor	r22, r22
    1112:	b0 0d       	add	r27, r0
    1114:	a1 1d       	adc	r26, r1
    1116:	66 1f       	adc	r22, r22
    1118:	82 9f       	mul	r24, r18
    111a:	22 27       	eor	r18, r18
    111c:	b0 0d       	add	r27, r0
    111e:	a1 1d       	adc	r26, r1
    1120:	62 1f       	adc	r22, r18
    1122:	73 9f       	mul	r23, r19
    1124:	b0 0d       	add	r27, r0
    1126:	a1 1d       	adc	r26, r1
    1128:	62 1f       	adc	r22, r18
    112a:	83 9f       	mul	r24, r19
    112c:	a0 0d       	add	r26, r0
    112e:	61 1d       	adc	r22, r1
    1130:	22 1f       	adc	r18, r18
    1132:	74 9f       	mul	r23, r20
    1134:	33 27       	eor	r19, r19
    1136:	a0 0d       	add	r26, r0
    1138:	61 1d       	adc	r22, r1
    113a:	23 1f       	adc	r18, r19
    113c:	84 9f       	mul	r24, r20
    113e:	60 0d       	add	r22, r0
    1140:	21 1d       	adc	r18, r1
    1142:	82 2f       	mov	r24, r18
    1144:	76 2f       	mov	r23, r22
    1146:	6a 2f       	mov	r22, r26
    1148:	11 24       	eor	r1, r1
    114a:	9f 57       	subi	r25, 0x7F	; 127
    114c:	50 40       	sbci	r21, 0x00	; 0
    114e:	9a f0       	brmi	.+38     	; 0x1176 <__mulsf3_pse+0x88>
    1150:	f1 f0       	breq	.+60     	; 0x118e <__mulsf3_pse+0xa0>
    1152:	88 23       	and	r24, r24
    1154:	4a f0       	brmi	.+18     	; 0x1168 <__mulsf3_pse+0x7a>
    1156:	ee 0f       	add	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	bb 1f       	adc	r27, r27
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	50 40       	sbci	r21, 0x00	; 0
    1166:	a9 f7       	brne	.-22     	; 0x1152 <__mulsf3_pse+0x64>
    1168:	9e 3f       	cpi	r25, 0xFE	; 254
    116a:	51 05       	cpc	r21, r1
    116c:	80 f0       	brcs	.+32     	; 0x118e <__mulsf3_pse+0xa0>
    116e:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
    1172:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>
    1176:	5f 3f       	cpi	r21, 0xFF	; 255
    1178:	e4 f3       	brlt	.-8      	; 0x1172 <__mulsf3_pse+0x84>
    117a:	98 3e       	cpi	r25, 0xE8	; 232
    117c:	d4 f3       	brlt	.-12     	; 0x1172 <__mulsf3_pse+0x84>
    117e:	86 95       	lsr	r24
    1180:	77 95       	ror	r23
    1182:	67 95       	ror	r22
    1184:	b7 95       	ror	r27
    1186:	f7 95       	ror	r31
    1188:	e7 95       	ror	r30
    118a:	9f 5f       	subi	r25, 0xFF	; 255
    118c:	c1 f7       	brne	.-16     	; 0x117e <__mulsf3_pse+0x90>
    118e:	fe 2b       	or	r31, r30
    1190:	88 0f       	add	r24, r24
    1192:	91 1d       	adc	r25, r1
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret

0000119c <__umulhisi3>:
    119c:	a2 9f       	mul	r26, r18
    119e:	b0 01       	movw	r22, r0
    11a0:	b3 9f       	mul	r27, r19
    11a2:	c0 01       	movw	r24, r0
    11a4:	a3 9f       	mul	r26, r19
    11a6:	70 0d       	add	r23, r0
    11a8:	81 1d       	adc	r24, r1
    11aa:	11 24       	eor	r1, r1
    11ac:	91 1d       	adc	r25, r1
    11ae:	b2 9f       	mul	r27, r18
    11b0:	70 0d       	add	r23, r0
    11b2:	81 1d       	adc	r24, r1
    11b4:	11 24       	eor	r1, r1
    11b6:	91 1d       	adc	r25, r1
    11b8:	08 95       	ret

000011ba <_exit>:
    11ba:	f8 94       	cli

000011bc <__stop_program>:
    11bc:	ff cf       	rjmp	.-2      	; 0x11bc <__stop_program>
