/*
 * Motor.h
 *
 * Created: 3/24/2020 3:07:53 PM
 *  Author: Bogdan
 */ 


#ifndef MOTOR_H_
#define MOTOR_H_

#define F_CPU 16000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdlib.h>
#include "LCD.h"

//the PWM is between 0 and 255
#define MAX_PWM 255

//nr of pulses/rotation generated by the encoder
#define PULSES 12.0

//gear ratio of the motor
#define GEAR_RATIO 10.0

//constant used to calculated the velocity
#define VELOCITY_CONST (double)(((100000 / PULSES) / GEAR_RATIO) * PINION_RADIUS)

//the radius of the pinion in meters; in this case it is 15 mm
#define PINION_RADIUS 0.015

//number of teeth of the pinion
#define PINION_TEETH 60

//constant used to calculate the pinion position
#define PINION_CONSTANT (int)((PULSES * GEAR_RATIO) / PINION_TEETH)

//number of the rack teeth
#define RACK_TEETH 62

//Maximum/Minimum position of the encoder pulses
#define MAX_POSITION (RACK_TEETH * PINION_CONSTANT)
#define MIN_POSITION 0

//PID controller constants, found by tuning the controller
#define KP 0.5
#define KI 0.15
#define IMAX_LIM 4
#define KD 0.5

void setupPorts(void);

//Timer0 is used to generate the PWM signal which drives the motor
//The duty factor is between 0 and 255
void setupTimer0(void);
void startTimer0(void);
void stopTimer0(void);

//Timer1 is programmed to generate an interrupt at every 10 microseconds
//I use this value to calculate speed and acceleration
void setupTimer1(void);
void setupTimer1Int(void);
void startTimer1(void);
void stopTimer1(void);

//Int0 and Int1 are used for the signals coming from the encoder
//They are active on the Rising edge
void setupInt0(void);
void setupInt1(void);
//Pin Change Interrupt on PortB, used for the user interface buttons
void setupPinChgInt(void);


void MotorSetup(void);
void MotorSetDuty(unsigned char duty);
void MotorSetDirection(unsigned char dir);
void MotorStop(void);

//get the necessary direction based on the reference position and the actual position
unsigned int getDirection(int ref, int pos);
//Get the error = Set_Point - Process_Variable
int getError(int sp, int pv);
//Get the necessary PID drive
int getPIDdrive(int error, int prev_error, double *errorI);
#endif /* MOTOR_H_ */